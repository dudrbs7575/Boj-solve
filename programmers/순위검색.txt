#include <string>
#include <iostream>
#include <algorithm>
#include <vector>
#include <map>
#include <tuple>
#include <cstring>

using namespace std;

map<tuple<string,string,string,string>, vector<int>> m;
map<tuple<string,string,string,string>, vector<int>>::iterator i;

vector<int> solution(vector<string> info, vector<string> query) {
    vector<int> answer;
    
    for(const string &s : info){
        char a[10], b[10], c[10], d[10];
        int point;
        sscanf(s.c_str(), "%s %s %s %s %d",a,b,c,d,&point);
        m[make_tuple(a,b,c,d)].push_back(point);
        m[make_tuple("-",b,c,d)].push_back(point);
        m[make_tuple(a,"-",c,d)].push_back(point);
        m[make_tuple(a,b,"-",d)].push_back(point);
        m[make_tuple(a,b,c,"-")].push_back(point);
        m[make_tuple("-","-",c,d)].push_back(point);
        m[make_tuple("-",b,"-",d)].push_back(point);
        m[make_tuple("-",b,c,"-")].push_back(point);
        m[make_tuple(a,"-","-",d)].push_back(point);
        m[make_tuple(a,"-",c,"-")].push_back(point);
        m[make_tuple(a,b,"-","-")].push_back(point);
        m[make_tuple("-","-","-",d)].push_back(point);
        m[make_tuple("-","-",c,"-")].push_back(point);
        m[make_tuple("-",b,"-","-")].push_back(point);
        m[make_tuple(a,"-","-","-")].push_back(point);
        m[make_tuple("-","-","-","-")].push_back(point);
    }
    
    for(auto i : m){
        auto v = i.second;
        sort(v.begin(), v.end());
        m[i.first]=v;
    }
    
    for(const string &s : query){
        char a[10], b[10], c[10], d[10];
        int point;
        sscanf(s.c_str(), "%s and %s and %s and %s %d",a,b,c,d,&point);
        
        vector<int> tmp = m[{string(a),string(b),string(c),string(d)}];
        int idx=lower_bound(tmp.begin(),tmp.end(),point)-tmp.begin();
        answer.push_back(tmp.size()-idx);
    }
    
    return answer;
}