#include <string>
#include <iostream>
#include <vector>
#include <string.h>

using namespace std;

#define MAX 31

char arr[MAX][MAX];
bool can_remove[MAX][MAX];
bool flag=true;
int dx[]={0,1,1};
int dy[]={1,1,0};

void make_arr(int m, int n, vector<string> board){
    string tmp;
    for(int i=0;i<m;i++){
        tmp=board[i];
        for(int j=0;j<n;j++){
            arr[i][j]=tmp[j];
        }
    }
}

void reboarding(int x, int y){
    for(int i=0;i<y;i++){
        int idx=-1;
        for(int j=x-1;j>=0;j--){
            if(arr[j][i]==' '){
                idx=j;
                break;
            }
        }
        if(idx==-1)
            continue;
        
        int iidx=idx;
        for(int j=idx;j>=0;j--){
            if(arr[j][i]!=' '){
                arr[iidx--][i]=arr[j][i];
                arr[j][i]=' ';
            }
        }
    }
}


int chk_remove(int x, int y){
    char block;
    for(int i=0;i<x-1;i++){
        for(int j=0;j<y-1;j++){
            if(arr[i][j]==' ')
                continue;
            block=arr[i][j];
            int cnt=0;
            for(int k=0;k<3;k++){
                int nx=i+dx[k];
                int ny=j+dy[k];
                if(block==arr[nx][ny])
                    cnt++;
            }
            if(cnt==3){
                can_remove[i][j]=true;
                for(int k=0;k<3;k++){
                    int nx=i+dx[k];
                    int ny=j+dy[k];
                    can_remove[nx][ny]=true;
                }
            }
        }
    }
    
    int cnt=0;
    for(int i=0;i<x;i++){
        for(int j=0;j<y;j++){
            if(can_remove[i][j]==true){
                can_remove[i][j]=false;
                arr[i][j]=' ';
                cnt++;
            }
        }
    }
    if(cnt==0){
        flag=false;
        return 0;
    }
    
    reboarding(x,y);
    return cnt;
}

int solution(int m, int n, vector<string> board) {
    int answer = 0;
    
    make_arr(m,n,board);
    
    while(true){
        flag=true;
        answer+=chk_remove(m,n);
        cout<<'\n';
        if(!flag)
            break;
    }
    return answer;
}