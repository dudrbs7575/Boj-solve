#include <bits/stdc++.h>

using namespace std;

int r;
int c;
bool flag=false;
int dx[]={0,0,-1,1};
int dy[]={-1,1,0,0};

bool isRange(int x, int y){
    return 0<=x&&x<r&&0<=y&&y<c;
}

void dfs(int x, int y, int endX, int endY, int turn, int dir , char kakao, vector<string> &board){
    if(x==endX&&y==endY){
        if(turn<=1)
            flag=true;
        return;
    }
    int nx; int ny;
    for(int i=0;i<4;i++){
        nx=x+dx[i];
        ny=y+dy[i];
        if(!isRange(nx,ny)||board[nx][ny]=='*'||('A'<=board[x][y]&&board[x][y]<='Z'&&board[x][y]!=kakao))
           continue;
        if(i!=dir){
            if(turn+1>=2)
                continue;
            dfs(nx,ny,endX,endY,turn+1,i,kakao,board);
        }
        else
            dfs(nx,ny,endX,endY,turn,i,kakao,board);
    }
}

// 전역 변수를 정의할 경우 함수 내에 초기화 코드를 꼭 작성해주세요.
string solution(int m, int n, vector<string> board) {
    string answer = "";
    r=m;c=n;
    map<char,vector<pair<int,int>>> ma;
    for(int i=0;i<r;i++){
        for(int j=0;j<c;j++){
            if('A'<=board[i][j]&&board[i][j]<='Z'&&ma.find(board[i][j])==ma.end()){
                ma[board[i][j]].push_back({i,j});
                continue;
            }
            if(ma.find(board[i][j])!=ma.end())
                ma[board[i][j]].push_back({i,j});
        }
    }   //짝 마다의 좌표를 map에 담기
    
    while(true){
        bool canRemove = false;        
        for(auto &iter : ma){
            vector<string> tmp=board;
            flag=false;
            char alphabet = iter.first;
            auto [a,b]=iter.second[0];
            auto [c,d]=iter.second[1];
            dfs(a,b,c,d,-1,-1,alphabet,tmp);
            if(flag){
                canRemove=true;
                answer+=alphabet;
                board[a][b]='.';
                board[c][d]='.';
                ma.erase(alphabet);
                break;  //지우면 다시 오름차순으로 봐야 함
            }
        }
        if(canRemove)
            continue;
        break;
    }
    
    if(ma.empty())
        return answer;
    else
        return "IMPOSSIBLE";
}