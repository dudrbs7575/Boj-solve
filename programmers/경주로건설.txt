#include <string>
#include <vector>
#include <algorithm>
#include <cstring>
#include <iostream>

using namespace std;

int dx[]={0,1,0,-1};  //우, 하, 좌, 상
int dy[]={1,0,-1,0};
int N;
vector<vector<int>> costBoard;
int answer=100000000;

void dfs(int x, int y, vector<vector<int>> &board, int cost, int prevDir){   
    if(costBoard[x][y]<cost)
        return;
    /*이 문제는 chk를 쓰면 안됨. 모든 경우를 따져봐야 함. 단, dfs or bfs사용 시 무한루프 도는 것을 막기 위해 
    **각 지점마다 최소 비용 cost를 저장하는 costBoard를 생성하고 값을 설정한 뒤, 특정 지점에서의 cost가 이 costBoard의 cost보다
    **높을 시 loop를 도는 것이기 때문에 return해줘야 함.
    */
    if(x==N-1&&y==N-1){
        answer=min(answer,cost);
        return;
    }
    for(int i=0;i<4;i++){
        int nx=x+dx[i];
        int ny=y+dy[i];
        if(0<=nx&&0<=ny&&nx<N&&ny<N){
            if(board[nx][ny])
                continue;
            if(x==0&&y==0){
                costBoard[nx][ny]=costBoard[x][y]+100;
                dfs(nx,ny,board,cost+100,i);
                continue;
            }
            if(prevDir==i){
                if(costBoard[nx][ny]>costBoard[x][y]+100)
                    costBoard[nx][ny]=costBoard[x][y]+100;
                dfs(nx,ny,board,cost+100,i);
            }
            else{
                if(costBoard[nx][ny]>costBoard[x][y]+600)
                    costBoard[nx][ny]=costBoard[x][y]+600;
                dfs(nx,ny,board,cost+600,i);
            }
        }
    }
}


int solution(vector<vector<int>> board) {
    N=board.size();
    costBoard.resize(N,vector<int>(N,100000000));
    costBoard[0][0]=0;
    dfs(0,0,board,0,-1);
    return answer;
}